--
-- PostgreSQL database dump
--
-- helper commands
-- dropdb -h $HOST -U nayduck nayduck
-- createdb -h $HOST -U nayduck nayduck
-- psql -h $HOST -U nayduck -l
-- psql -h $HOST -U nayduck -f schema.sql
-- Dumped from database version 14.9
-- Dumped by pg_dump version 14.11 (Debian 14.11-1.pgdg110+2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: build_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.build_status AS ENUM (
    'PENDING',
    'BUILDING',
    'BUILD DONE',
    'BUILD FAILED'
);


ALTER TYPE public.build_status OWNER TO postgres;

--
-- Name: test_category; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.test_category AS ENUM (
    'pytest',
    'mocknet',
    'expensive'
);


ALTER TYPE public.test_category OWNER TO postgres;

--
-- Name: test_status; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.test_status AS ENUM (
    'FAILED',
    'CHECKOUT FAILED',
    'SCP FAILED',
    'TIMEOUT',
    'PASSED',
    'IGNORED',
    'CANCELED',
    'SKIPPED',
    'RUNNING',
    'PENDING'
);


ALTER TYPE public.test_status OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_cookies; Type: TABLE; Schema: public; Owner: nayduck
--

CREATE TABLE public.auth_cookies (
    "timestamp" integer NOT NULL,
    cookie bigint NOT NULL
);


ALTER TABLE public.auth_cookies OWNER TO nayduck;

--
-- Name: builds; Type: TABLE; Schema: public; Owner: nayduck
--

CREATE TABLE public.builds (
    build_id integer NOT NULL,
    run_id integer NOT NULL,
    status public.build_status NOT NULL,
    started timestamp with time zone,
    finished timestamp with time zone,
    stderr bytea DEFAULT '\x'::bytea NOT NULL,
    stdout bytea DEFAULT '\x'::bytea NOT NULL,
    features character varying DEFAULT ''::character varying NOT NULL,
    is_release boolean DEFAULT false NOT NULL,
    low_priority boolean DEFAULT false NOT NULL,
    builder_ip bigint DEFAULT 0 NOT NULL
);


ALTER TABLE public.builds OWNER TO nayduck;

--
-- Name: builds_build_id_seq; Type: SEQUENCE; Schema: public; Owner: nayduck
--

ALTER TABLE public.builds ALTER COLUMN build_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.builds_build_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: logs; Type: TABLE; Schema: public; Owner: nayduck
--

CREATE TABLE public.logs (
    test_id integer NOT NULL,
    type character varying NOT NULL,
    log bytea NOT NULL,
    size bigint NOT NULL,
    storage character varying NOT NULL,
    stack_trace boolean NOT NULL
);


ALTER TABLE public.logs OWNER TO nayduck;

--
-- Name: runs; Type: TABLE; Schema: public; Owner: nayduck
--

CREATE TABLE public.runs (
    run_id integer NOT NULL,
    branch character varying NOT NULL,
    sha bytea NOT NULL,
    "timestamp" timestamp with time zone DEFAULT now() NOT NULL,
    title character varying NOT NULL,
    requester character varying NOT NULL
);


ALTER TABLE public.runs OWNER TO nayduck;

--
-- Name: runs_run_id_seq; Type: SEQUENCE; Schema: public; Owner: nayduck
--

ALTER TABLE public.runs ALTER COLUMN run_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.runs_run_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: tests; Type: TABLE; Schema: public; Owner: nayduck
--

CREATE TABLE public.tests (
    test_id integer NOT NULL,
    run_id integer NOT NULL,
    build_id integer NOT NULL,
    status public.test_status DEFAULT 'PENDING'::public.test_status NOT NULL,
    category public.test_category NOT NULL,
    name character varying NOT NULL,
    started timestamp with time zone,
    finished timestamp with time zone,
    worker_ip bigint DEFAULT 0 NOT NULL,
    branch character varying NOT NULL,
    is_nightly boolean DEFAULT false NOT NULL,
    timeout integer DEFAULT 180 NOT NULL,
    skip_build boolean DEFAULT false NOT NULL,
    tries integer DEFAULT 0 NOT NULL,
    worker_hostname character varying
);


ALTER TABLE public.tests OWNER TO nayduck;

--
-- Name: tests_test_id_seq; Type: SEQUENCE; Schema: public; Owner: nayduck
--

ALTER TABLE public.tests ALTER COLUMN test_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tests_test_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_cookies auth_cookies_pkey; Type: CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.auth_cookies
    ADD CONSTRAINT auth_cookies_pkey PRIMARY KEY ("timestamp", cookie);


--
-- Name: builds builds_pkey; Type: CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.builds
    ADD CONSTRAINT builds_pkey PRIMARY KEY (build_id);


--
-- Name: logs logs_pkey; Type: CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.logs
    ADD CONSTRAINT logs_pkey PRIMARY KEY (test_id, type);


--
-- Name: runs runs_pkey; Type: CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.runs
    ADD CONSTRAINT runs_pkey PRIMARY KEY (run_id);


--
-- Name: tests tests_pkey; Type: CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.tests
    ADD CONSTRAINT tests_pkey PRIMARY KEY (test_id);


--
-- Name: builds_builder_ip_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX builds_builder_ip_idx ON public.builds USING btree (builder_ip) WHERE (builder_ip <> 0);


--
-- Name: builds_low_priority_build_id_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX builds_low_priority_build_id_idx ON public.builds USING btree (low_priority, build_id) WHERE (status = 'PENDING'::public.build_status);


--
-- Name: builds_run_id_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX builds_run_id_idx ON public.builds USING btree (run_id);


--
-- Name: builds_status_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX builds_status_idx ON public.builds USING btree (status) WHERE (status = ANY (ARRAY['PENDING'::public.build_status, 'BUILDING'::public.build_status]));


--
-- Name: runs_timestamp_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX runs_timestamp_idx ON public.runs USING btree ("timestamp") WHERE ((requester)::text = 'NayDuck'::text);


--
-- Name: tests_branch_name_test_id_status_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX tests_branch_name_test_id_status_idx ON public.tests USING btree (branch, name, test_id, status);


--
-- Name: tests_build_id_expr_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX tests_build_id_expr_idx ON public.tests USING btree (build_id, ((category = 'expensive'::public.test_category))) WHERE (status = 'PENDING'::public.test_status);


--
-- Name: tests_build_id_status_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX tests_build_id_status_idx ON public.tests USING btree (build_id, status) WHERE (status = ANY (ARRAY['PENDING'::public.test_status, 'RUNNING'::public.test_status]));


--
-- Name: tests_name_finished_status_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX tests_name_finished_status_idx ON public.tests USING btree (name, finished, status) WHERE (is_nightly AND (finished IS NOT NULL) AND (status <> ALL (ARRAY['PENDING'::public.test_status, 'RUNNING'::public.test_status])));


--
-- Name: tests_run_id_idx; Type: INDEX; Schema: public; Owner: nayduck
--

CREATE INDEX tests_run_id_idx ON public.tests USING btree (run_id);


--
-- Name: builds builds_run_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.builds
    ADD CONSTRAINT builds_run_id_fkey FOREIGN KEY (run_id) REFERENCES public.runs(run_id) ON DELETE CASCADE;


--
-- Name: logs logs_test_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.logs
    ADD CONSTRAINT logs_test_id_fkey FOREIGN KEY (test_id) REFERENCES public.tests(test_id) ON DELETE CASCADE;


--
-- Name: tests tests_build_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.tests
    ADD CONSTRAINT tests_build_id_fkey FOREIGN KEY (build_id) REFERENCES public.builds(build_id) ON DELETE CASCADE;


--
-- Name: tests tests_run_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: nayduck
--

ALTER TABLE ONLY public.tests
    ADD CONSTRAINT tests_run_id_fkey FOREIGN KEY (run_id) REFERENCES public.runs(run_id) ON DELETE CASCADE;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: cloudsqlsuperuser
--

REVOKE ALL ON SCHEMA public FROM cloudsqladmin;
REVOKE ALL ON SCHEMA public FROM PUBLIC;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--
